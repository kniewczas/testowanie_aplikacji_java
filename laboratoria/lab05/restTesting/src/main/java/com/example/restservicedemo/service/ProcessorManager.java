package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.Processor;

public class ProcessorManager {

	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_PROCESSOR = "CREATE TABLE Processor(id bigint GENERATED BY DEFAULT AS IDENTITY, model varchar(20), family varchar(20), clockRating double, cores int)";

	private PreparedStatement addProcessorStmt;
	private PreparedStatement getProcessorStmt;
	private PreparedStatement updateProcessorStmt;
	private PreparedStatement deleteProcessorStmt;	
	private PreparedStatement getAllProcessorsStmt;
	private PreparedStatement deleteAllProcessorsStmt;
	private PreparedStatement searchProcessorStmt;
	private PreparedStatement showFastestProcessorsStmt;
	private PreparedStatement advancedSearch;
	
	private Statement statement;

	public ProcessorManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Processor".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_PROCESSOR);

			addProcessorStmt = connection
					.prepareStatement("INSERT INTO Processor (id, model, family, clockRating, cores) VALUES (?, ?, ?, ?, ?)");
			getProcessorStmt = connection
					.prepareStatement("SELECT * FROM Processor WHERE id = ?");
			updateProcessorStmt = connection
					.prepareStatement("UPDATE Processor SET model = ?, family = ?, clockRating = ?, cores = ? WHERE id = ?");
			deleteProcessorStmt = connection
					.prepareStatement("DELETE FROM Processor WHERE id = ?");
			getAllProcessorsStmt = connection
					.prepareStatement("SELECT * FROM Processor");
			deleteAllProcessorsStmt = connection
					.prepareStatement("DELETE FROM Processor");
			searchProcessorStmt = connection
					.prepareStatement("SELECT * FROM Processor WHERE family = ?");
			advancedSearch = connection
					.prepareStatement("SELECT * FROM Processor WHERE family = ? AND model = ? AND cores = ? AND clockRating = ?");
			showFastestProcessorsStmt = connection
					.prepareStatement("SELECT * FROM Processor WHERE clockRating>(SELECT AVG(clockRating) FROM Processor)");

			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}
	
	//ADD
	public int addProcessor(Processor processor) {
		int count = 0;
		try {
			addProcessorStmt.setLong(1, processor.getId());
			addProcessorStmt.setString(2, processor.getModel());
			addProcessorStmt.setString(3, processor.getFamily());
			addProcessorStmt.setDouble(4, processor.getClockRating());
			addProcessorStmt.setInt(5, processor.getCores());

			count = addProcessorStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	//GET
	public Processor getProcessor(Long id) {
		Processor p = new Processor();
		try {
			getProcessorStmt.setLong(1, id);
			ResultSet rs = getProcessorStmt.executeQuery();

			while (rs.next()) {
				p.setId(rs.getInt("id"));
				p.setModel(rs.getString("model"));
				p.setFamily(rs.getString("family"));
				p.setClockRating(rs.getDouble("clockRating"));
				p.setCores(rs.getInt("cores"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return p;
	}
	
	//UPDATE
	public int updateProcessor(Long id, Processor processor) {
		int count = 0;
		try {
			updateProcessorStmt.setString(1, processor.getModel());
			updateProcessorStmt.setString(2, processor.getFamily());
			updateProcessorStmt.setDouble(3, processor.getClockRating());
			updateProcessorStmt.setInt(4, processor.getCores());
			updateProcessorStmt.setLong(5, processor.getId());
			count = updateProcessorStmt.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	//DETETE
	public int deleteProcessor(Long id) {
		int count = 0;
		try {
			deleteProcessorStmt.setLong(1, id);
			count = deleteProcessorStmt.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	//GET ALL
	public List<Processor> getAllProcessors() {
		List<Processor> processors = new ArrayList<Processor>();

		try {
			ResultSet rs = getAllProcessorsStmt.executeQuery();

			while (rs.next()) {
				Processor p = new Processor();
				p.setId(rs.getInt("id"));
				p.setModel(rs.getString("model"));
				p.setFamily(rs.getString("family"));
				p.setClockRating(rs.getDouble("clockRating"));
				p.setCores(rs.getInt("cores"));
				processors.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return processors;
	}

	//GET ROWS COUNT
		public int getRows() {
			List<Processor> processors = new ArrayList<Processor>();

				int count = 0;
			try {
				ResultSet rs = getAllProcessorsStmt.executeQuery();
				
				while (rs.next()) {
					count++;
				}

			} catch (SQLException e) {
				e.printStackTrace();
			}
			return count;
		}
	
	//DELETE ALL
	public void clearProcessors() {
		try {
			deleteAllProcessorsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	
	//SEARCH
	public List<Processor> searchProcessors(String familyName) {
		List<Processor> processors = new ArrayList<Processor>();

		try{
			searchProcessorStmt.setString(1, familyName);
			ResultSet rs = searchProcessorStmt.executeQuery();
			
			while (rs.next()) {
				Processor p = new Processor();
				p.setId(rs.getInt("id"));
				p.setModel(rs.getString("model"));
				p.setFamily(rs.getString("family"));
				p.setClockRating(rs.getDouble("clockRating"));
				p.setCores(rs.getInt("cores"));
				processors.add(p);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		catch(NumberFormatException n)
		{
			processors = null;
		}
		return processors;
	}
	
    //SHOW FASTEST
	public List<Processor> showFastest(){
		
		List<Processor> processors = new ArrayList<Processor>();	
		try
		{
			ResultSet rs = showFastestProcessorsStmt.executeQuery();
			
			while (rs.next()) {
				Processor p = new Processor();
				p.setId(rs.getInt("id"));
				p.setModel(rs.getString("model"));
				p.setFamily(rs.getString("family"));
				p.setClockRating(rs.getDouble("clockRating"));
				p.setCores(rs.getInt("cores"));
				processors.add(p);
			}
		}
		catch (SQLException e) {
		e.printStackTrace();
		}
		return processors;
	}
	
	//ADVANCED
		public List<Processor> advancedSearch(String model, String family, double clockRatign, int cores){
			
			List<Processor> processors = new ArrayList<Processor>();	
			try
			{
				advancedSearch.setString(1, family);
				advancedSearch.setString(2, model);
				advancedSearch.setInt(3, cores);
				advancedSearch.setDouble(4, clockRatign);			
				ResultSet rs = advancedSearch.executeQuery();
				
				while (rs.next()) {
					Processor p = new Processor();
					p.setId(rs.getInt("id"));
					p.setModel(rs.getString("model"));
					p.setFamily(rs.getString("family"));
					p.setClockRating(rs.getDouble("clockRating"));
					p.setCores(rs.getInt("cores"));
					processors.add(p);
				}
			}
			catch (SQLException e) {
			e.printStackTrace();
			}
			return processors;
		}
}
